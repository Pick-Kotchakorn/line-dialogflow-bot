require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const { SessionsClient } = require('@google-cloud/dialogflow');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// LINE Bot Configuration - ‡∏õ‡∏¥‡∏î signature validation ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// Dialogflow Configuration
let sessionClient;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ JSON ‡∏à‡∏≤‡∏Å Environment Variable ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå
if (process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
  const credentials = JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON);
  sessionClient = new SessionsClient({
    projectId: process.env.GOOGLE_PROJECT_ID,
    credentials: credentials
  });
  console.log('üîë Using credentials from Environment Variable');
} else {
  sessionClient = new SessionsClient({
    projectId: process.env.GOOGLE_PROJECT_ID,
    keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS
  });
  console.log('üîë Using credentials from file');
}

const client = new line.Client(config);

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Security headers for production
app.use((req, res, next) => {
  res.header('X-Frame-Options', 'DENY');
  res.header('X-Content-Type-Options', 'nosniff');
  next();
});

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ 
    status: 'ü§ñ LINE Dialogflow Bot is running!', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    uptime: `${Math.floor(process.uptime())} seconds`
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Webhook verification endpoint (for LINE verification)
app.get('/webhook', (req, res) => {
  console.log('üîç Webhook verification request received');
  res.status(200).send('Webhook verification successful');
});

// Webhook endpoint - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° signature validation ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
app.post('/webhook', (req, res) => {
  console.log('üì® Received webhook:', JSON.stringify(req.body, null, 2));
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô verification request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.body.events || req.body.events.length === 0) {
      console.log('‚úÖ Verification request received');
      return res.status(200).json({ message: 'OK' });
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô LINE middleware
    Promise
      .all(req.body.events.map(handleEvent))
      .then((result) => {
        console.log('‚úÖ Webhook processed successfully');
        res.status(200).json(result);
      })
      .catch((error) => {
        console.error('‚ùå Error handling webhook:', error);
        res.status(500).json({ error: 'Internal server error' });
      });
      
  } catch (error) {
    console.error('‚ùå Error in webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Main event handler
async function handleEvent(event) {
  console.log('üîÑ Handling event:', event.type);
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  if (event.type !== 'message' || event.message.type !== 'text') {
    console.log('‚è≠Ô∏è Skipping non-text message');
    return Promise.resolve(null);
  }

  const userId = event.source.userId;
  const userMessage = event.message.text;
  console.log(`üë§ User ${userId} said: "${userMessage}"`);
  
  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå"
    await showTypingStatus(userId);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Dialogflow
    const dialogflowResponse = await sendToDialogflow(userMessage, userId);
    console.log(`ü§ñ Bot response: "${dialogflowResponse}"`);
    
    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: dialogflowResponse
    });
    
  } catch (error) {
    console.error('‚ùå Error in handleEvent:', error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üôè'
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
async function showTypingStatus(userId) {
  const typingMessages = [
    'üí≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...',
    'ü§î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...',
    '‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...',
    'üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
    'üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ AI ‡∏Ñ‡∏¥‡∏î...'
  ];
  
  const randomMessage = typingMessages[Math.floor(Math.random() * typingMessages.length)];
  
  try {
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await client.pushMessage(userId, {
      type: 'text',
      text: randomMessage
    });
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    console.log(`üí¨ Showed typing status: "${randomMessage}"`);
    
  } catch (error) {
    console.error('‚ùå Error showing typing status:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Dialogflow
async function sendToDialogflow(message, sessionId) {
  try {
    const sessionPath = sessionClient.projectAgentSessionPath(
      process.env.GOOGLE_PROJECT_ID,
      sessionId
    );

    const request = {
      session: sessionPath,
      queryInput: {
        text: {
          text: message,
          languageCode: 'th-TH', // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        },
      },
    };

    console.log(`üöÄ Sending to Dialogflow: "${message}"`);
    const responses = await sessionClient.detectIntent(request);
    const result = responses[0].queryResult;
    
    console.log(`üì• Dialogflow detected intent: "${result.intent?.displayName || 'Unknown'}"`);
    console.log(`üì§ Dialogflow response: "${result.fulfillmentText}"`);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Dialogflow
    if (!result.fulfillmentText) {
      return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ü§î\n\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö';
    }
    
    return result.fulfillmentText;
    
  } catch (error) {
    console.error('‚ùå Error sending to Dialogflow:', error);
    
    // Return fallback response ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw error
    return `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ü§ñ`;
  }
}

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('üí• Unhandled error:', error);
  res.status(500).json({ 
    error: 'Something went wrong!',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
  });
});

// Handle 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    message: 'The requested endpoint does not exist'
  });
});

// Start server
app.listen(PORT, () => {
  console.log('üöÄ ====================================');
  console.log(`ü§ñ LINE Dialogflow Bot Server Started`);
  console.log(`üì° Port: ${PORT}`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìä Health Check: http://localhost:${PORT}/health`);
  console.log(`üîó Webhook: http://localhost:${PORT}/webhook`);
  console.log(`üìÖ Started at: ${new Date().toISOString()}`);
  console.log('üöÄ ====================================');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
  checkEnvironmentVariables();
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
function checkEnvironmentVariables() {
  const requiredVars = [
    'LINE_CHANNEL_ACCESS_TOKEN',
    'LINE_CHANNEL_SECRET', 
    'GOOGLE_PROJECT_ID'
  ];
  
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  WARNING: Missing environment variables:');
    missingVars.forEach(varName => {
      console.log(`   ‚ùå ${varName}`);
    });
    console.log('   Please check your environment settings');
  } else {
    console.log('‚úÖ All environment variables are set');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Credentials
  if (process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
    console.log('‚úÖ Google credentials loaded from JSON environment variable');
  } else if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
    console.log('‚úÖ Google credentials loaded from file path');
  } else {
    console.log('‚ö†Ô∏è  WARNING: No Google credentials found');
  }
}
