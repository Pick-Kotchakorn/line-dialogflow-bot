require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const { SessionsClient } = require('@google-cloud/dialogflow');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// LINE Bot Configuration
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

const client = new line.Client(lineConfig);

// Dialogflow Configuration
let sessionClient = null;
let dialogflowReady = false;

// Initialize Dialogflow
async function initializeDialogflow() {
  try {
    if (process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
      // ‡πÉ‡∏ä‡πâ JSON credentials ‡∏à‡∏≤‡∏Å environment variable
      const credentials = JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON);
      sessionClient = new SessionsClient({
        projectId: process.env.GOOGLE_PROJECT_ID,
        credentials: credentials
      });
      dialogflowReady = true;
      console.log('‚úÖ Dialogflow initialized from JSON credentials');
    } else if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
      // ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå credentials
      sessionClient = new SessionsClient({
        projectId: process.env.GOOGLE_PROJECT_ID,
        keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS
      });
      dialogflowReady = true;
      console.log('‚úÖ Dialogflow initialized from file credentials');
    } else {
      throw new Error('No Google credentials found');
    }
  } catch (error) {
    console.error('‚ùå Failed to initialize Dialogflow:', error.message);
    dialogflowReady = false;
  }
}

// Initialize Dialogflow on startup
initializeDialogflow();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// CORS headers
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  next();
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    status: 'ü§ñ LINE Dialogflow Bot is running!',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    features: {
      lineBot: !!process.env.LINE_CHANNEL_ACCESS_TOKEN,
      dialogflow: dialogflowReady,
      typingStatus: true,
      autoReply: true
    },
    uptime: Math.floor(process.uptime()) + ' seconds'
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  const health = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    environment: process.env.NODE_ENV || 'development',
    services: {
      line: !!client,
      dialogflow: dialogflowReady
    }
  };
  res.json(health);
});

// Webhook verification endpoint
app.get('/webhook', (req, res) => {
  console.log('üîç GET Webhook verification received');
  res.status(200).send('Webhook endpoint is working!');
});

// Webhook endpoint for LINE
app.post('/webhook', async (req, res) => {
  console.log('üì® POST Webhook received:', JSON.stringify(req.body, null, 2));
  
  try {
    const signature = req.get('X-Line-Signature');
    console.log('üîê Signature received:', signature ? 'Yes' : 'No');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ events ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.body.events) {
      console.log('‚úÖ No events found - verification request');
      return res.status(200).json({ message: 'OK' });
    }

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const results = await Promise.all(
      req.body.events.map(event => handleEvent(event))
    );
    
    console.log('‚úÖ All events processed successfully');
    res.status(200).json({ message: 'OK', results });
    
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
});

// Main event handler
async function handleEvent(event) {
  console.log(`üîÑ Processing event: ${event.type}`);
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  if (event.type !== 'message' || event.message.type !== 'text') {
    console.log('‚è≠Ô∏è Skipping non-text message');
    return null;
  }

  const { replyToken, source, message } = event;
  const userId = source.userId;
  const userMessage = message.text.trim();
  
  console.log(`üë§ User ${userId} said: "${userMessage}"`);

  try {
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    console.log('üí≠ Sending typing status...');
    await sendTypingStatus(userId);
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
    await sleep(1500);
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    console.log('ü§ñ Processing message...');
    const botResponse = await processMessage(userMessage, userId);
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    console.log(`üì§ Replying: "${botResponse}"`);
    await client.replyMessage(replyToken, {
      type: 'text',
      text: botResponse
    });
    
    console.log('‚úÖ Event handled successfully');
    return { status: 'success', userId, message: userMessage };
    
  } catch (error) {
    console.error('‚ùå Error handling event:', error);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    try {
      await client.replyMessage(replyToken, {
        type: 'text',
        text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üôè'
      });
    } catch (replyError) {
      console.error('‚ùå Failed to send error message:', replyError);
    }
    
    return { status: 'error', error: error.message };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
async function sendTypingStatus(userId) {
  const typingMessages = [
    'üí≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...',
    'ü§î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...',
    '‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...',
    'üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
    'üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ AI ‡∏Ñ‡∏¥‡∏î...',
    '‚ú® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...'
  ];
  
  const randomMessage = typingMessages[Math.floor(Math.random() * typingMessages.length)];
  
  try {
    await client.pushMessage(userId, {
      type: 'text',
      text: randomMessage
    });
    console.log(`üí¨ Typing status sent: "${randomMessage}"`);
  } catch (error) {
    console.error('‚ùå Failed to send typing status:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function processMessage(message, userId) {
  // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Dialogflow ‡∏Å‡πà‡∏≠‡∏ô
  if (dialogflowReady) {
    try {
      const dialogflowResponse = await queryDialogflow(message, userId);
      if (dialogflowResponse && dialogflowResponse.trim()) {
        return dialogflowResponse;
      }
    } catch (error) {
      console.error('‚ùå Dialogflow error:', error);
    }
  }
  
  // ‡πÉ‡∏ä‡πâ fallback responses ‡∏ñ‡πâ‡∏≤ Dialogflow ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  return getFallbackResponse(message);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dialogflow
async function queryDialogflow(message, sessionId) {
  if (!sessionClient || !dialogflowReady) {
    throw new Error('Dialogflow not initialized');
  }
  
  try {
    const sessionPath = sessionClient.projectAgentSessionPath(
      process.env.GOOGLE_PROJECT_ID,
      sessionId || uuidv4()
    );

    const request = {
      session: sessionPath,
      queryInput: {
        text: {
          text: message,
          languageCode: 'th-TH'
        }
      }
    };

    console.log(`üöÄ Querying Dialogflow: "${message}"`);
    const [response] = await sessionClient.detectIntent(request);
    const result = response.queryResult;
    
    console.log(`üì• Intent detected: "${result.intent?.displayName || 'Unknown'}"`);
    console.log(`üì§ Dialogflow response: "${result.fulfillmentText}"`);
    
    return result.fulfillmentText || null;
    
  } catch (error) {
    console.error('‚ùå Dialogflow query error:', error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö fallback
function getFallbackResponse(message) {
  const lowerMessage = message.toLowerCase();
  
  // ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
  if (lowerMessage.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || lowerMessage.includes('‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ') || 
      lowerMessage.includes('‡∏î‡∏µ') || lowerMessage.includes('hello') || 
      lowerMessage.includes('hi')) {
    return 'ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Yondaime Bot ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä';
  }
  
  // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  if (lowerMessage.includes('‡∏ä‡πà‡∏ß‡∏¢') || lowerMessage.includes('help') || 
      lowerMessage.includes('‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°') || lowerMessage.includes('‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')) {
    return 'üìã ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n\n‚Ä¢ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n‚Ä¢ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥\n‚Ä¢ ‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ú‡∏°‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö! üí™';
  }
  
  // ‡∏Ñ‡∏≥‡∏•‡∏≤
  if (lowerMessage.includes('‡∏ö‡∏≤‡∏¢') || lowerMessage.includes('‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô') || 
      lowerMessage.includes('‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô') || lowerMessage.includes('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì')) {
    return 'üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üòä';
  }
  
  // ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  if (lowerMessage.includes('‡∏ó‡∏î‡∏™‡∏≠‡∏ö') || lowerMessage.includes('test')) {
    return '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö!\n\nü§ñ Bot Status: Online\n‚ö° Response Time: Fast\nüåê Server: Render\nüì° Connection: Stable\n\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö! üí™';
  }
  
  // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  const generalResponses = [
    `ü§ñ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!\n\n‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡∏ú‡∏°‡∏à‡∏∂‡∏á‡∏¢‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏° "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö üòä`,
    
    `üí≠ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ "${message}"\n\n‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§î`,
    
    `üéØ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡∏Ñ‡∏£‡∏±‡∏ö!\n\n‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡∏≠‡∏≤‡∏à‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! ‚ò∫Ô∏è`
  ];
  
  return generalResponses[Math.floor(Math.random() * generalResponses.length)];
}

// Utility function: sleep
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('üí• Unhandled error:', error);
  res.status(500).json({
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not found',
    message: 'The requested endpoint does not exist',
    availableEndpoints: ['/', '/health', '/webhook']
  });
});

// Start server
const server = app.listen(PORT, () => {
  console.log('üöÄ =====================================');
  console.log(`ü§ñ LINE Dialogflow Bot Started`);
  console.log(`üì° Port: ${PORT}`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìä Health Check: http://localhost:${PORT}/health`);
  console.log(`üîó Webhook: http://localhost:${PORT}/webhook`);
  console.log(`üìÖ Started: ${new Date().toISOString()}`);
  console.log('üöÄ =====================================');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
  validateEnvironment();
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
function validateEnvironment() {
  const required = [
    'LINE_CHANNEL_ACCESS_TOKEN',
    'LINE_CHANNEL_SECRET',
    'GOOGLE_PROJECT_ID'
  ];
  
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.log('‚ö†Ô∏è  Missing environment variables:');
    missing.forEach(key => console.log(`   ‚ùå ${key}`));
  } else {
    console.log('‚úÖ All required environment variables are set');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dialogflow credentials
  if (process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
    console.log('‚úÖ Dialogflow credentials: JSON format');
  } else if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
    console.log('‚úÖ Dialogflow credentials: File path');
  } else {
    console.log('‚ö†Ô∏è  No Dialogflow credentials found - using fallback responses');
  }
}

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üëã SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('üî¥ Process terminated');
    process.exit(0);
  });
});

module.exports = app;
